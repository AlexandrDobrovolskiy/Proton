const test = require('tape');
const extend = require('./');
const mutableExtend = require('./mutable');

test('merge', assert => {
  const a = { a: 'foo' };
  const b = { b: 'bar' };

  assert.deepEqual(extend(a, b), { a: 'foo', b: 'bar' });
  assert.end();
});

test('replace', assert => {
  const a = { a: 'foo' };
  const b = { a: 'bar' };

  assert.deepEqual(extend(a, b), { a: 'bar' });
  assert.end();
});

test('undefined', assert => {
  const a = { a: undefined };
  const b = { b: 'foo' };

  assert.deepEqual(extend(a, b), { a: undefined, b: 'foo' });
  assert.deepEqual(extend(b, a), { a: undefined, b: 'foo' });
  assert.end();
});

test('handle 0', assert => {
  const a = { a: 'default' };
  const b = { a: 0 };

  assert.deepEqual(extend(a, b), { a: 0 });
  assert.deepEqual(extend(b, a), { a: 'default' });
  assert.end();
});

test('is immutable', assert => {
  const record = {};

  extend(record, { foo: 'bar' });
  assert.equal(record.foo, undefined);
  assert.end();
});

test('null as argument', assert => {
  const a = { foo: 'bar' };
  const b = null;
  const c = void 0;

  assert.deepEqual(extend(b, a, c), { foo: 'bar' });
  assert.end();
});

test('mutable', assert => {
  const a = { foo: 'bar' };

  mutableExtend(a, { bar: 'baz' });

  assert.equal(a.bar, 'baz');
  assert.end();
});

test('null prototype', assert => {
  const a = { a: 'foo' };
  const b = Object.create(null);
  b.b = 'bar';

  assert.deepEqual(extend(a, b), { a: 'foo', b: 'bar' });
  assert.end();
});

test('null prototype mutable', assert => {
  const a = { foo: 'bar' };
  const b = Object.create(null);
  b.bar = 'baz';

  mutableExtend(a, b);

  assert.equal(a.bar, 'baz');
  assert.end();
});
