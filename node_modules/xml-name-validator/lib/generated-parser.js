module.exports = (function() {
  function _waka(parser, startRule) {
    if (startRule && !parser.rules[startRule])
      throw new Error(`start rule missing: ${JSON.stringify(startRule)}`);

    return {
      getState() {
        return parser.state;
      },

      getTrace(message) {
        return (message ? `${message}\n` : '') + parser.state.traceLine();
      },

      exec(input) {
        if (!startRule) throw new Error('no start rule given');

        parser.state.setInput(input);

        try {
          var value = parser.rules[startRule]();
        } catch (err) {
          var error = err;
        }

        if (error == null) {
          if (!parser.state.adv || !parser.state.isEOF())
            var error = new Error('Unexpected syntax in top');
        }

        return {
          success: error == null,
          value: !error ? value : undefined,
          error,
        };
      },

      startWith(rule) {
        return _waka(parser, rule);
      },
    };
  }
  return _waka(
    (function() {
      const _rules = {};
      _rules.NameStartChar = function() {
        var _R = _P.match(':');
        if (!_P.adv) {
          _P.adv = true;
          const $0 = _P.cur();
          if ($0 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($0 >= 'A' && $0 <= 'Z');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('_');
        }
        if (!_P.adv) {
          _P.adv = true;
          const $1 = _P.cur();
          if ($1 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($1 >= 'a' && $1 <= 'z');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $2 = _P.cur();
          if ($2 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($2 >= '\u00C0' && $2 <= '\u00D6');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $3 = _P.cur();
          if ($3 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($3 >= '\u00D8' && $3 <= '\u00F6');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $4 = _P.cur();
          if ($4 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($4 >= '\u00F8' && $4 <= '\u02FF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $5 = _P.cur();
          if ($5 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($5 >= '\u0370' && $5 <= '\u037D');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $6 = _P.cur();
          if ($6 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($6 >= '\u037F' && $6 <= '\u1FFF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $7 = _P.cur();
          if ($7 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($7 >= '\u200C' && $7 <= '\u200D');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $8 = _P.cur();
          if ($8 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($8 >= '\u2070' && $8 <= '\u218F');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $9 = _P.cur();
          if ($9 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($9 >= '\u2C00' && $9 <= '\u2FEF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $a = _P.cur();
          if ($a == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($a >= '\u3001' && $a <= '\uD7FF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $b = _P.cur();
          if ($b == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($b >= '\uF900' && $b <= '\uFDCF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $c = _P.cur();
          if ($c == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($c >= '\uFDF0' && $c <= '\uFFFD');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          $d: {
            var $e = _P.pos;
            const $f = _P.cur();
            if ($f == null) {
              _P.adv = false;
              null;
            } else {
              _P.step($f >= '\uD800' && $f <= '\uDB7F');
            }
            if (!_P.adv) break $d;
            const $g = _P.cur();
            if ($g == null) {
              _P.adv = false;
              null;
            } else {
              _P.step($g >= '\uDC00' && $g <= '\uDFFF');
            }
            var _R = _P.doc.substring($e, _P.pos);
          }
          if (!_P.adv) _P.pos = $e;
        }
        return _R;
      };
      _rules.NameChar = function() {
        var _R = _rules.NameStartChar();
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('-');
        }
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('.');
        }
        if (!_P.adv) {
          _P.adv = true;
          const $0 = _P.cur();
          if ($0 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($0 >= '0' && $0 <= '9');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('\u00B7');
        }
        if (!_P.adv) {
          _P.adv = true;
          const $1 = _P.cur();
          if ($1 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($1 >= '\u0300' && $1 <= '\u036F');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $2 = _P.cur();
          if ($2 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($2 >= '\u203F' && $2 <= '\u2040');
          }
        }
        return _R;
      };
      _rules.Name = function() {
        $0: {
          var $1 = _P.pos;
          _rules.NameStartChar();
          if (!_P.adv) break $0;
          let $2 = false;
          for (;;) {
            _rules.NameChar();
            if (!_P.adv) break;
            $2 = true;
          }
          _P.adv = true;
          var _R = _P.doc.substring($1, _P.pos);
        }
        if (!_P.adv) _P.pos = $1;
        return _R;
      };
      _rules.QName = function() {
        var _R = _rules.PrefixedName();
        if (!_P.adv) {
          _P.adv = true;
          var _R = _rules.UnprefixedName();
        }
        return _R;
      };
      _rules.PrefixedName = function() {
        $0: {
          var $1 = _P.pos;
          _rules.Prefix();
          if (!_P.adv) break $0;
          _P.match(':');
          if (!_P.adv) break $0;
          _rules.LocalPart();
          var _R = _P.doc.substring($1, _P.pos);
        }
        if (!_P.adv) _P.pos = $1;
        return _R;
      };
      _rules.UnprefixedName = function() {
        const _R = _rules.LocalPart();
        return _R;
      };
      _rules.Prefix = function() {
        const _R = _rules.NCName();
        return _R;
      };
      _rules.LocalPart = function() {
        const _R = _rules.NCName();
        return _R;
      };
      _rules.NCNameStartChar = function() {
        const $0 = _P.cur();
        if ($0 == null) {
          _P.adv = false;
          var _R = null;
        } else {
          var _R = _P.step($0 >= 'A' && $0 <= 'Z');
        }
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('_');
        }
        if (!_P.adv) {
          _P.adv = true;
          const $1 = _P.cur();
          if ($1 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($1 >= 'a' && $1 <= 'z');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $2 = _P.cur();
          if ($2 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($2 >= '\u00C0' && $2 <= '\u00D6');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $3 = _P.cur();
          if ($3 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($3 >= '\u00D8' && $3 <= '\u00F6');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $4 = _P.cur();
          if ($4 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($4 >= '\u00F8' && $4 <= '\u02FF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $5 = _P.cur();
          if ($5 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($5 >= '\u0370' && $5 <= '\u037D');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $6 = _P.cur();
          if ($6 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($6 >= '\u037F' && $6 <= '\u1FFF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $7 = _P.cur();
          if ($7 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($7 >= '\u200C' && $7 <= '\u200D');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $8 = _P.cur();
          if ($8 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($8 >= '\u2070' && $8 <= '\u218F');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $9 = _P.cur();
          if ($9 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($9 >= '\u2C00' && $9 <= '\u2FEF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $a = _P.cur();
          if ($a == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($a >= '\u3001' && $a <= '\uD7FF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $b = _P.cur();
          if ($b == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($b >= '\uF900' && $b <= '\uFDCF');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $c = _P.cur();
          if ($c == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($c >= '\uFDF0' && $c <= '\uFFFD');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          $d: {
            var $e = _P.pos;
            const $f = _P.cur();
            if ($f == null) {
              _P.adv = false;
              null;
            } else {
              _P.step($f >= '\uD800' && $f <= '\uDB7F');
            }
            if (!_P.adv) break $d;
            const $g = _P.cur();
            if ($g == null) {
              _P.adv = false;
              null;
            } else {
              _P.step($g >= '\uDC00' && $g <= '\uDFFF');
            }
            var _R = _P.doc.substring($e, _P.pos);
          }
          if (!_P.adv) _P.pos = $e;
        }
        return _R;
      };
      _rules.NCNameChar = function() {
        var _R = _rules.NCNameStartChar();
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('-');
        }
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('.');
        }
        if (!_P.adv) {
          _P.adv = true;
          const $0 = _P.cur();
          if ($0 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($0 >= '0' && $0 <= '9');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          var _R = _P.match('\u00B7');
        }
        if (!_P.adv) {
          _P.adv = true;
          const $1 = _P.cur();
          if ($1 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($1 >= '\u0300' && $1 <= '\u036F');
          }
        }
        if (!_P.adv) {
          _P.adv = true;
          const $2 = _P.cur();
          if ($2 == null) {
            _P.adv = false;
            var _R = null;
          } else {
            var _R = _P.step($2 >= '\u203F' && $2 <= '\u2040');
          }
        }
        return _R;
      };
      _rules.NCName = function() {
        $0: {
          var $1 = _P.pos;
          _rules.NCNameStartChar();
          if (!_P.adv) break $0;
          let $2 = false;
          for (;;) {
            _rules.NCNameChar();
            if (!_P.adv) break;
            $2 = true;
          }
          _P.adv = true;
          var _R = _P.doc.substring($1, _P.pos);
        }
        if (!_P.adv) _P.pos = $1;
        return _R;
      };
      function ParserState() {
        this.doc = '';
        this.pos = 0;
        this.adv = true;

        this.setInput = function(doc) {
          this.doc = doc;
          this.pos = 0;
          this.adv = true;
        };

        this.isEOF = function() {
          return this.pos == this.doc.length;
        };

        this.cur = function() {
          return _P.doc[_P.pos];
        };

        this.match = function(str) {
          if ((_P.adv = _P.doc.substr(_P.pos, str.length) == str)) {
            _P.pos += str.length;
            return str;
          }
        };

        this.step = function(flag) {
          if ((_P.adv = flag)) {
            _P.pos++;
            return _P.doc[_P.pos - 1];
          }
        };

        this.unexpected = function(rule) {
          throw new Error(`Unexpected syntax in ${rule}`);
        };

        this.traceLine = function(pos) {
          if (!pos) pos = _P.pos;

          let from = _P.doc.lastIndexOf('\n', pos),
            to = _P.doc.indexOf('\n', pos);

          if (from == -1) from = 0;
          else from++;

          if (to == -1) to = pos.length;

          const lineNo = _P.doc.substring(0, from).split('\n').length;
          const line = _P.doc.substring(from, to);
          const pointer = `${Array(200)
            .join(' ')
            .substr(0, pos - from)}^^^`;

          return `Line ${lineNo}:\n${line}\n${pointer}`;
        };
      }
      var _P = new ParserState();
      return {
        state: _P,
        rules: _rules,
      };
    })(),
    null,
  );
})();
